trigger:
  - main

resources:
  - repo: self

variables:
  vmImage: 'ubuntu-latest'
  dockerHubServiceConnection: 'dockerConnection'
  imageName: 'samtec7856/gello'
  dockerTag: '$(Build.BuildId)'  # Use Build ID as the tag for versioning

stages:
  # Stage 1: Build the application and Docker image
  - stage: Build
    displayName: set node environment
    jobs:
      - job: BuildAndDocker
        displayName: Build Application and Docker Image
        pool:
          vmImage: $(vmImage)
        steps:
          - checkout: self

          # Set up Node.js environment
          - task: NodeTool@0
            displayName: Set up Node.js
            inputs:
              versionSpec: '18.x'

          # Verify Node.js version
          - script: |
              node -v
              npm -v
            displayName: Verify Node.js Version

          # Install dependencies
          - script: |
              npm install
            displayName: Install Dependencies

          # Build the application
          - script: |
              npm run build
            displayName: Build Application
            
  - stage: buildDocker
    displayName: Build Docker Image
    jobs:
      - job: BuildAndDocker
        displayName: Build and Push Docker Image
        pool:
          vmImage: $(vmImage)
        steps:
          - checkout: self

          # Log in to Docker Hub
          - task: Docker@2
            displayName: Log in to Docker Hub
            inputs:
              command: login
              containerRegistry: $(dockerHubServiceConnection)

          # Display the image name and tag for debugging
          - script: |
              echo "Image Name: $(imageName)"
              echo "Docker Tag: $(dockerTag)"
            displayName: "Display Image Name and Tag"

          # Build Docker image
          - task: Docker@2
            displayName: Build Docker Image
            inputs:
              command: build
              Dockerfile: ./Dockerfile  # Ensure the Dockerfile path is correct
              tags: |
                $(imageName):$(dockerTag)
                $(imageName):latest

          # Verify the image exists locally
          - script: |
              docker images
            displayName: "List Docker Images"

          # Push Docker image to Docker Hub
          - task: Docker@2
            displayName: Push Docker Image
            inputs:
              command: push
              containerRegistry: $(dockerHubServiceConnection)
              repository: $(imageName)
              tags: |
                $(dockerTag)
                latest


  # Stage 2: Publish Docker Image as Artifact (Optional)
  - stage: PublishDockerImage
    displayName: Publish Docker Image Artifact for Release
    dependsOn: Build
    jobs:
      - job: PublishDockerImage
        displayName: Publish Docker Image Artifact
        pool:
          vmImage: $(vmImage)
        steps:
          # You can publish the Docker image to an artifact registry, or pass it through for deployment.
          - script: |
              echo "Publishing Docker image as artifact"
            displayName: Placeholder for Docker image artifact publish

  # Stage 3: Deploy or Release Docker Image (if needed)
  - stage: Release
    displayName: Release Docker Image
    dependsOn: PublishDockerImage
    jobs:
      - job: ReleaseDockerImage
        displayName: Deploy Docker Image
        pool:
          vmImage: $(vmImage)
        steps:
          # This stage could contain steps for deploying or testing the Docker image.
          - script: |
              echo "Deploying Docker image $(imageName):$(dockerTag)"
            displayName: Deploy Docker Image
