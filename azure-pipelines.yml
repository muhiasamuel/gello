trigger:
  - main

resources:
  - repo: self

variables:
  vmImage: 'ubuntu-latest'
  dockerHubServiceConnection: 'dockerConnection'
  imageName: 'samtec7856/gello'  # Ensure this matches your Docker Hub repository
  dockerTag: '$(Build.BuildId)'  # Use Build ID as the tag for versioning

stages:
  # Stage 1: Build and Test Application
  - stage: Build
    displayName: Build and Test Application
    jobs:
      - job: BuildApp
        displayName: Build Node.js Application
        pool:
          vmImage: $(vmImage)
        steps:
          - checkout: self

          # Set up Node.js environment
          - task: NodeTool@0
            displayName: Set up Node.js
            inputs:
              versionSpec: '18.x'

          # Debug Node.js version
          - script: |
              node -v
              npm -v
            displayName: Verify Node.js and npm Versions

          # Install dependencies
          - script: |
              npm install
            displayName: Install Dependencies

          # Run tests (Optional)
          # - script: |
          #     npm run test
          #   displayName: Run Tests

          # Build the application
          - script: |
              npm run build
            displayName: Build Application

  # Stage 2: Build Docker Image
  - stage: DockerBuild
    displayName: Build and Push Docker Image
    dependsOn: Build
    jobs:
      - job: DockerBuildAndPush
        displayName: Build and Push Docker Image
        pool:
          vmImage: $(vmImage)
        steps:
          - checkout: self

          # Log in to Docker Hub
          - task: Docker@2
            displayName: Log in to Docker Hub
            inputs:
              command: login
              containerRegistry: $(dockerHubServiceConnection)

          # Debug image name and tag
          - script: |
              echo "Image Name: $(imageName)"
              echo "Docker Tag: $(dockerTag)"
            displayName: Debug Image Name and Tag

          # Build Docker image
          - task: Docker@2
            displayName: Build Docker Image
            inputs:
              command: build
              Dockerfile: ./Dockerfile  # Ensure the Dockerfile path is correct
              tags: |
                $(imageName):$(dockerTag)
                $(imageName):latest

          # List all Docker images
          - script: |
              docker images
            displayName: List All Docker Images

          # Verify Docker image exists locally
          - script: |
              docker images | grep $(imageName) || echo "Image not found. Check build and tag steps."
            displayName: Verify Docker Image with Debugging

          # Push Docker image to Docker Hub
          - task: Docker@2
            displayName: Push Docker Image
            inputs:
              command: push
              containerRegistry: $(dockerHubServiceConnection)
              repository: $(imageName)
              tags: |
                $(dockerTag)
                latest

  # Stage 3: Publish Docker Image Artifact (Optional)
  - stage: PublishArtifact
    displayName: Publish Docker Image as Artifact
    dependsOn: DockerBuild
    jobs:
      - job: PublishDockerArtifact
        displayName: Publish Docker Artifact
        pool:
          vmImage: $(vmImage)
        steps:
          # Save the Docker image SHA or metadata as an artifact
          - script: |
              echo "Saving Docker image information..."
              docker inspect $(imageName):$(dockerTag) > image-metadata.json
            displayName: Save Docker Image Metadata

          - task: PublishBuildArtifacts@1
            displayName: Publish Docker Image Artifact
            inputs:
              pathToPublish: $(Pipeline.Workspace)
              artifactName: DockerImage
              publishLocation: Container

  # Stage 4: Release or Deploy
  - stage: Release
    displayName: Deploy Docker Image
    dependsOn: PublishArtifact
    jobs:
      - job: DeployDocker
        displayName: Deploy Docker Image
        pool:
          vmImage: $(vmImage)
        steps:
          # Deploy the Docker image (customize as per your deployment process)
          - script: |
              echo "Deploying Docker image $(imageName):$(dockerTag)"
              # Add deployment logic here
            displayName: Deploy Docker Image
