trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '1ee26717-9186-48e2-88ac-0dc5abbf27d9'
  imageRepository: 'muhiasamuelgello'
  containerRegistry: 'ekart.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent pool name
  agentPoolName: 'Gello'  # Replace 'Gello' with your actual self-hosted agent pool name

  # Azure Web App name and resource group
  webAppName: 'Gello'  # Replace with your Azure Web App name
  resourceGroupName: 'E-Kart'  # Replace with your resource group name

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: $(agentPoolName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: ArchiveFiles@2
      displayName: 'Archive Files'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)' 
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

# - stage: Deploy
#   displayName: Deploy to Azure Web Containers
#   jobs:
#   - job: Deploy
#     displayName: Deploying
#     pool:
#       name: $(agentPoolName)
#     steps:
#     - task: DownloadBuildArtifacts@1
#       displayName: Download Build Artifacts
#       inputs:
#         buildType: 'current'
#         downloadPath: '$(System.ArtifactsDirectory)'
#     - task: AzureWebApp@1
#       displayName: Deploy to Azure Web App for Containers
#       inputs:
#         azureSubscription: 'gello'
#         appName: $(webAppName)
#         imageName: $(containerRegistry)/$(imageRepository):$(tag)
#         containerCommand: ''
#         resourceGroupName: $(resourceGroupName)
