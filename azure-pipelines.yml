trigger:
  - main

resources:
  - repo: self

variables:
  vmImage: 'ubuntu-latest'
  dockerHubServiceConnection: 'dockerConnection' # Update with your service connection name
  imageName: 'samtec7856/gello'
  dockerTag: '$(Build.BuildId)' # Unique tag for versioning
  artifactName: 'docker-image-artifact'

stages:
  # Stage 1: Build the application and Docker image
  - stage: BuildAndPush
    displayName: Build and Push Docker Image
    jobs:
      - job: BuildAndPush
        displayName: Build and Push Docker Image
        pool:
          vmImage: $(vmImage)
        steps:
          # Checkout source code
          - checkout: self

          # Set up Node.js environment
          - task: NodeTool@0
            displayName: Set up Node.js
            inputs:
              versionSpec: '18.x'

          # Install dependencies and build the application
          - script: |
              npm install
              npm run build
            displayName: Install Dependencies and Build Application

          # Log in to Docker Hub
          - task: Docker@2
            displayName: Log in to Docker Hub
            inputs:
              command: login
              containerRegistry: $(dockerHubServiceConnection)

          # Build the Docker image
          - task: Docker@2
            displayName: Build Docker Image
            inputs:
              command: build
              Dockerfile: ./Dockerfile # Update path if needed
              buildContext: .
              tags: |
                $(imageName):$(dockerTag)
                $(imageName):latest

          # Verify Docker image locally
          - script: |
              docker images | grep $(imageName)
            displayName: Verify Docker Image

          # Push Docker image to Docker Hub
          - task: Docker@2
            displayName: Push Docker Image
            inputs:
              command: push
              containerRegistry: $(dockerHubServiceConnection)
              repository: $(imageName)
              tags: |
                $(dockerTag)
                latest

          # Publish Docker image as an artifact for the release pipeline
          - task: PublishPipelineArtifact@1
            displayName: Publish Docker Image Artifact
            inputs:
              targetPath: $(Pipeline.Workspace) # Path where the image metadata is stored
              artifact: $(artifactName)

  # Stage 2: Release Docker Image
  - stage: Release
    displayName: Release Docker Image
    dependsOn: BuildAndPush
    jobs:
      - job: ReleaseDockerImage
        displayName: Release Docker Image
        pool:
          vmImage: $(vmImage)
        steps:
          # Download the published artifact
          - task: DownloadPipelineArtifact@2
            displayName: Download Docker Image Artifact
            inputs:
              artifact: $(artifactName)

          # Log release information
          - script: |
              echo "Deploying Docker image $(imageName):$(dockerTag)"
              echo "Artifact successfully downloaded."
            displayName: Log Release Info

          # Placeholder for deployment
          - script: |
              echo "Placeholder: Deploy Docker Image"
            displayName: Deploy Docker Image
